#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "Picture_Window_2"]

def Xform "Root" (
    customData = {
        float3 rotationEulerHint = (0, 3.1415927, 0)
    }
)
{
    reorder nameChildren = ["Picture_Window_1", "Picture_Window_2", "Floor_lamp", "Cushion", "Carvaan_Music_Player", "Picture_Window_3", "MaplePlywood_1", "floor_1", "Low_Poly_Light_Bulb", "Dome", "DomeMat", "ImageBasedLight", "floor", "wall"]
    quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
    float3 xformOp:scale = (1.7, 1.7, 1.7)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Cube "floor" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["DefaultMaterial", "floor_1", "floor_2", "floor_3"]
        rel material:binding = </Root/floor/DefaultMaterial>
        double size = 0.2
        float3 xformOp:scale = (7.5, 0.1, 7.5)
        float3 xformOp:translate = (-0.75, -2.3885687e-7, -0.75)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/floor/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/floor/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "opacityThreshold"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @floor.png@
                float2 inputs:st.connect = </Root/floor/DefaultMaterial/opacityThreshold/TexCoordReader.outputs:result>
                float outputs:r

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @floor_9.jpeg@
                float2 inputs:st.connect = </Root/floor/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def Cube "floor_1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Maple_Plywood", "DefaultMaterial"]
            rel material:binding = </Root/floor/floor_1/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 1.2643236e-16, 0)
            float3 xformOp:scale = (1.0000001, 1.0000001, 1.0000001)
            float3 xformOp:translate = (0.20000005, 2.2737368e-13, 7.450581e-9)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/floor/floor_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/floor/floor_1/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "opacityThreshold"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor.png@
                    float2 inputs:st.connect = </Root/floor/floor_1/DefaultMaterial/opacityThreshold/TexCoordReader.outputs:result>
                    float outputs:r

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor/floor_1/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor_9.jpeg@
                    float2 inputs:st.connect = </Root/floor/floor_1/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor/floor_1/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }

        def Cube "floor_2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Maple_Plywood", "DefaultMaterial"]
            rel material:binding = </Root/floor/floor_2/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (40, 40)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 1.0320264e-15, 0)
            float3 xformOp:scale = (1.0000002, 1.0000001, 1.0000002)
            float3 xformOp:translate = (0.20000005, 2.2737368e-13, 0.20000003)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/floor/floor_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/floor/floor_2/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "opacityThreshold"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor.png@
                    float2 inputs:st.connect = </Root/floor/floor_2/DefaultMaterial/opacityThreshold/TexCoordReader.outputs:result>
                    float outputs:r

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor/floor_2/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor_9.jpeg@
                    float2 inputs:st.connect = </Root/floor/floor_2/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor/floor_2/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }

        def Cube "floor_3" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Maple_Plywood", "DefaultMaterial"]
            rel material:binding = </Root/floor/floor_3/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (60, 60)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (1, 0, 1.9376205e-15, 0)
            float3 xformOp:scale = (1.0000002, 1.0000002, 1.0000002)
            float3 xformOp:translate = (7.450581e-9, 2.2737368e-13, 0.20000014)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/floor/floor_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/floor/floor_3/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "opacityThreshold"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor.png@
                    float2 inputs:st.connect = </Root/floor/floor_3/DefaultMaterial/opacityThreshold/TexCoordReader.outputs:result>
                    float outputs:r

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor/floor_3/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor_9.jpeg@
                    float2 inputs:st.connect = </Root/floor/floor_3/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor/floor_3/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }
    }

    def Cube "wall" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (1.5713012, 0.00001221895, 1.5707964)
        }
    )
    {
        reorder nameChildren = ["DomeMat", "DefaultMaterial"]
        rel material:binding = </Root/wall/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (0.49987686, 0.50012314, 0.5001293, 0.49987075)
        float3 xformOp:scale = (9.999998, 0.19999996, 14.999997)
        float3 xformOp:translate = (0, 0.97999907, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/wall/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def "Picture_Window_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, -1.1397504, 0)
        }
        references = @Picture_Window.usdz@
    )
    {
        reorder nameChildren = ["window1", "Materials", "Meshes"]
        quatf xformOp:orient = (0.84196836, 0, -0.53952694, 0)
        float3 xformOp:scale = (0.003, 0.0030000003, 0.0030000003)
        float3 xformOp:translate = (0, 0.5, 1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "window1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
            }
        )
        {
            reorder nameChildren = ["Cube_6", "Cube_7", "Cube_8", "DefaultMaterial"]
            rel material:binding = </Root/Picture_Window_1/window1/DefaultMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (60, 60)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (0.15122156, 0.6907434, 0.6907519, 0.15121976)
            float3 xformOp:scale = (3333.3323, 66.66665, 1833.3331)
            float3 xformOp:translate = (-133.10455, 160.01195, 289.42853)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Picture_Window_1/window1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def Cube "Cube_6" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
                }
            )
            {
                rel material:binding = </Root/Picture_Window_1/window1/Cube_6/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                float2 ui:nodegraph:node:pos = (80, 80)
                int ui:nodegraph:node:stackingOrder = 4
                quatf xformOp:orient = (1, -2.1679165e-9, -1.0837205e-7, 0.000004470276)
                float3 xformOp:scale = (0.99999994, 0.9999999, 0.99999994)
                float3 xformOp:translate = (1.7881393e-7, 0.00004339218, 0.3470911)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Picture_Window_1/window1/Cube_6/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube_7" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
                }
            )
            {
                rel material:binding = </Root/Picture_Window_1/window1/Cube_7/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                float2 ui:nodegraph:node:pos = (80, 80)
                int ui:nodegraph:node:stackingOrder = 4
                quatf xformOp:orient = (1, -2.1679165e-9, -1.08372056e-7, 0.000004470283)
                float3 xformOp:scale = (0.27000004, 0.9999999, 0.99999994)
                float3 xformOp:translate = (-0.073086195, -0.00006341934, 0.1646736)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Picture_Window_1/window1/Cube_7/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube_8" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
                }
            )
            {
                rel material:binding = </Root/Picture_Window_1/window1/Cube_8/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                float2 ui:nodegraph:node:pos = (100, 100)
                int ui:nodegraph:node:stackingOrder = 5
                quatf xformOp:orient = (1, -1.5145621e-13, -1.0837206e-7, 0.0000014900766)
                float3 xformOp:scale = (0.29000005, 0.9999997, 0.99999976)
                float3 xformOp:translate = (0.07106051, -0.00009679794, 0.16467363)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Picture_Window_1/window1/Cube_8/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }
        }
    }

    def "Picture_Window_2" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0.4363323, 0)
        }
        references = @Picture_Window.usdz@
    )
    {
        reorder nameChildren = ["Materials", "Meshes", "window2"]
        float2 ui:nodegraph:node:pos = (60, 60)
        int ui:nodegraph:node:stackingOrder = 3
        quatf xformOp:orient = (0.976296, 0, 0.2164396, 0)
        float3 xformOp:scale = (0.0029999996, 0.0029999996, 0.0029999998)
        float3 xformOp:translate = (-1.5, 0.50000244, 1.6008585e-7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "window2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
            }
        )
        {
            reorder nameChildren = ["Cube_6", "Cube_7", "Cube_8", "DefaultMaterial"]
            rel material:binding = </Root/Picture_Window_2/window2/DefaultMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (80, 80)
            int ui:nodegraph:node:stackingOrder = 4
            quatf xformOp:orient = (0.15555318, 0.6897809, 0.6897893, 0.15555121)
            float3 xformOp:scale = (3333.3325, 66.66664, 1833.3333)
            float3 xformOp:translate = (-134.87653, 159.999, 290.28702)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Picture_Window_2/window2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def Cube "Cube_6" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
                }
            )
            {
                rel material:binding = </Root/Picture_Window_2/window2/Cube_6/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                float2 ui:nodegraph:node:pos = (80, 80)
                int ui:nodegraph:node:stackingOrder = 4
                quatf xformOp:orient = (1, -2.1679165e-9, -1.0837205e-7, 0.000004470276)
                float3 xformOp:scale = (0.99999994, 0.9999999, 0.99999994)
                float3 xformOp:translate = (1.7881393e-7, 0.00004339218, 0.3470911)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Picture_Window_2/window2/Cube_6/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube_7" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
                }
            )
            {
                rel material:binding = </Root/Picture_Window_2/window2/Cube_7/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                float2 ui:nodegraph:node:pos = (80, 80)
                int ui:nodegraph:node:stackingOrder = 4
                quatf xformOp:orient = (1, -2.1679165e-9, -1.08372056e-7, 0.000004470283)
                float3 xformOp:scale = (0.27000004, 0.9999999, 0.99999994)
                float3 xformOp:translate = (-0.073086195, -0.00006341934, 0.1646736)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Picture_Window_2/window2/Cube_7/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube_8" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
                }
            )
            {
                rel material:binding = </Root/Picture_Window_2/window2/Cube_8/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                float2 ui:nodegraph:node:pos = (100, 100)
                int ui:nodegraph:node:stackingOrder = 5
                quatf xformOp:orient = (1, -1.5145621e-13, -1.0837206e-7, 0.0000014900766)
                float3 xformOp:scale = (0.29000005, 0.9999997, 0.99999976)
                float3 xformOp:translate = (0.07106051, -0.00009679794, 0.16467363)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Picture_Window_2/window2/Cube_8/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }
        }

        def Scope "Materials_1" (
            references = </Root/Picture_Window_3/Materials>
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1

            def Material "metal_blanco"
            {
                token outputs:surface.connect = </Root/Picture_Window_2/Materials_1/metal_blanco/pbr_shader.outputs:surface>

                def Shader "pbr_shader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.917647, 0.917647, 0.917647)
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:metallic = 0.41516182
                    normal3f inputs:normal = (1, 1, 1)
                    float inputs:occlusion = 1
                    float inputs:roughness = 0.4455627
                    token outputs:surface
                }
            }

            def Material "Glass_Crystal"
            {
                token outputs:surface.connect = </Root/Picture_Window_2/Materials_1/Glass_Crystal/pbr_shader.outputs:surface>

                def Shader "pbr_shader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:metallic = 0
                    normal3f inputs:normal = (1, 1, 1)
                    float inputs:occlusion = 1
                    float inputs:opacity = 0.1
                    float inputs:roughness = 0.6
                    token outputs:surface
                }
            }
        }
    }

    def "Floor_lamp" (
        active = true
        references = @Floor_lamp.usdz@
    )
    {
        reorder nameChildren = ["lightLamp", "Materials", "Meshes"]
        float3 xformOp:scale = (0.009, 0.009, 0.009)
        float3 xformOp:translate = (0.60000455, 0.01104965, 0.6000002)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "lightLamp" (
            customData = {
                float3 rotationEulerHint = (-1.5707964, 0, 0)
            }
        )
        {
            quatf xformOp:orient = (0.70710677, -0.70710677, 5.024296e-16, 5.024296e-16)
            float3 xformOp:scale = (99.99999, 99.99999, 99.99999)
            float3 xformOp:translate = (0.0000076293945, 105, -0.000038146973)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "SpotLight"
            {
                float attenuationFalloffExponent = 1
                float3 color = (1, 0.43734783, 0)
                token info:id = "RealityKit.SpotLight"
                float intensity = 7000

                def RealityKitStruct "Shadow"
                {
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (56.8609, 142.35779, 56.86091)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (-9.536743e-7, 71.47009, 0.00000667572)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }
    }

    def "Cushion" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0, 0)
        }
        references = @Cushion.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.013, 0.013, 0.013)
        float3 xformOp:translate = (-6.7397417e-9, -0.14000009, 0.052027564)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Carvaan_Music_Player" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 2.4434607, 0)
        }
        references = @Carvaan_Music_Player.usdz@
    )
    {
        reorder nameChildren = ["ParticleEmitter", "AudioLibrary", "Materials", "Meshes", "Jovita_mp3"]
        quatf xformOp:orient = (0.34202015, 0, 0.9396926, 0)
        float3 xformOp:scale = (0.0006, 0.0006, 0.0006)
        float3 xformOp:translate = (-0.5391958, 0.07889951, 0.6391786)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "ParticleEmitter" (
            customData = {
                float3 rotationEulerHint = (0, -2.443461, 0)
            }
        )
        {
            quatf xformOp:orient = (-0.34202015, 0, 0.9396926, 0)
            float3 xformOp:scale = (999.9999, 1000, 999.9999)
            float3 xformOp:translate = (-7.9056835, 51.54059, -1.4128418)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "VFXEmitter"
            {
                token info:id = "RealityKit.VFXEmitter"

                def RealityKitStruct "currentState"
                {
                    token birthDirection = "Normal"
                    token emitterShape = "Plane"
                    bool isEmitting = 1
                    bool isLocal = 0
                    bool isLocalFields = 0
                    token spawnOccasion = "OnDeath"

                    def RealityKitStruct "mainEmitter"
                    {
                        token blendMode = "Alpha"
                        bool isAnimated = 0
                        asset particleImage = @YinFu_F.png@
                    }

                    def RealityKitStruct "spawnedEmitter"
                    {
                    }
                }
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (374.19064, 291.06058, 114.787285)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 12.39241, 3.7750893)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }
    }

    def "Picture_Window_3" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 0.4363323, 0)
        }
        references = @Picture_Window.usdz@
    )
    {
        reorder nameChildren = ["Materials", "Meshes", "window2"]
        float2 ui:nodegraph:node:pos = (80, 80)
        int ui:nodegraph:node:stackingOrder = 4
        quatf xformOp:orient = (0.976296, 0, 0.2164396, 0)
        float3 xformOp:scale = (0.0029999996, 0.0029999996, 0.0029999998)
        float3 xformOp:translate = (1.5, 0.50000256, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "window2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
            }
        )
        {
            reorder nameChildren = ["Cube_6", "Cube_7", "Cube_8", "DefaultMaterial"]
            rel material:binding = </Root/Picture_Window_3/window2/DefaultMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            float2 ui:nodegraph:node:pos = (80, 80)
            int ui:nodegraph:node:stackingOrder = 4
            quatf xformOp:orient = (0.15555318, 0.6897809, 0.6897893, 0.15555121)
            float3 xformOp:scale = (3333.3325, 66.66664, 1833.3333)
            float3 xformOp:translate = (-134.87653, 159.999, 290.28702)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:surface.connect = </Root/Picture_Window_3/window2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }

            def Cube "Cube_6" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
                }
            )
            {
                rel material:binding = </Root/Picture_Window_3/window2/Cube_6/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                float2 ui:nodegraph:node:pos = (80, 80)
                int ui:nodegraph:node:stackingOrder = 4
                quatf xformOp:orient = (1, -2.1679165e-9, -1.0837205e-7, 0.000004470276)
                float3 xformOp:scale = (0.99999994, 0.9999999, 0.99999994)
                float3 xformOp:translate = (1.7881393e-7, 0.00004339218, 0.3470911)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Picture_Window_3/window2/Cube_6/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube_7" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
                }
            )
            {
                rel material:binding = </Root/Picture_Window_3/window2/Cube_7/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                float2 ui:nodegraph:node:pos = (80, 80)
                int ui:nodegraph:node:stackingOrder = 4
                quatf xformOp:orient = (1, -2.1679165e-9, -1.08372056e-7, 0.000004470283)
                float3 xformOp:scale = (0.27000004, 0.9999999, 0.99999994)
                float3 xformOp:translate = (-0.073086195, -0.00006341934, 0.1646736)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Picture_Window_3/window2/Cube_7/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }

            def Cube "Cube_8" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (1.5707964, 0.000012278557, 1.5707964)
                }
            )
            {
                rel material:binding = </Root/Picture_Window_3/window2/Cube_8/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                float2 ui:nodegraph:node:pos = (100, 100)
                int ui:nodegraph:node:stackingOrder = 5
                quatf xformOp:orient = (1, -1.5145621e-13, -1.0837206e-7, 0.0000014900766)
                float3 xformOp:scale = (0.29000005, 0.9999997, 0.99999976)
                float3 xformOp:translate = (0.07106051, -0.00009679794, 0.16467363)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    token outputs:surface.connect = </Root/Picture_Window_3/window2/Cube_8/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }
        }

        def Scope "Materials_1" (
            references = </Root/Picture_Window_3/Materials>
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1

            def Material "metal_blanco"
            {
                token outputs:surface.connect = </Root/Picture_Window_3/Materials_1/metal_blanco/pbr_shader.outputs:surface>

                def Shader "pbr_shader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.917647, 0.917647, 0.917647)
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:metallic = 0.41516182
                    normal3f inputs:normal = (1, 1, 1)
                    float inputs:occlusion = 1
                    float inputs:roughness = 0.4455627
                    token outputs:surface
                }
            }

            def Material "Glass_Crystal"
            {
                token outputs:surface.connect = </Root/Picture_Window_3/Materials_1/Glass_Crystal/pbr_shader.outputs:surface>

                def Shader "pbr_shader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:metallic = 0
                    normal3f inputs:normal = (1, 1, 1)
                    float inputs:occlusion = 1
                    float inputs:opacity = 0.1
                    float inputs:roughness = 0.6
                    token outputs:surface
                }
            }
        }
    }

    def "MaplePlywood_1" (
        active = true
        references = @MaplePlywood.usdz@
    )
    {
    }

    def Cube "floor_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        reorder nameChildren = ["DefaultMaterial", "floor_1", "floor_2", "floor_3"]
        rel material:binding = </Root/floor_1/DefaultMaterial>
        double size = 0.2
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (1, 0, 3.83002e-15, 0)
        float3 xformOp:scale = (7.4999995, 0.099999994, 7.4999995)
        float3 xformOp:translate = (-0.7500087, 1.9768755, -0.75000006)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token inputs:frame:stPrimvarName = "st" (
                customData = {
                    dictionary realitykit = {
                        bool hide = 1
                    }
                }
            )
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/floor_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                color3f inputs:diffuseColor.connect = </Root/floor_1/DefaultMaterial/diffuseColor.outputs:rgb>
                float inputs:roughness = 0.75
                token outputs:surface
            }

            def Shader "opacityThreshold"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @floor.png@
                float2 inputs:st.connect = </Root/floor_1/DefaultMaterial/opacityThreshold/TexCoordReader.outputs:result>
                float outputs:r

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor_1/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }

            def Shader "diffuseColor"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @floor_9.jpeg@
                float2 inputs:st.connect = </Root/floor_1/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                color3f outputs:rgb

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname.connect = </Root/floor_1/DefaultMaterial.inputs:frame:stPrimvarName>
                    float2 outputs:result
                }
            }
        }

        def Cube "floor_1" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Maple_Plywood", "DefaultMaterial"]
            rel material:binding = </Root/floor_1/floor_1/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 1.2643236e-16, 0)
            float3 xformOp:scale = (1.0000001, 1.0000001, 1.0000001)
            float3 xformOp:translate = (0.20000005, 2.2737368e-13, 7.450581e-9)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/floor_1/floor_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/floor_1/floor_1/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "opacityThreshold"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor.png@
                    float2 inputs:st.connect = </Root/floor_1/floor_1/DefaultMaterial/opacityThreshold/TexCoordReader.outputs:result>
                    float outputs:r

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor_1/floor_1/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor_9.jpeg@
                    float2 inputs:st.connect = </Root/floor_1/floor_1/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor_1/floor_1/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }

        def Cube "floor_2" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Maple_Plywood", "DefaultMaterial"]
            rel material:binding = </Root/floor_1/floor_2/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (40, 40)
            int ui:nodegraph:node:stackingOrder = 2
            quatf xformOp:orient = (1, 0, 1.0320264e-15, 0)
            float3 xformOp:scale = (1.0000002, 1.0000001, 1.0000002)
            float3 xformOp:translate = (0.20000005, 2.2737368e-13, 0.20000003)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/floor_1/floor_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/floor_1/floor_2/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "opacityThreshold"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor.png@
                    float2 inputs:st.connect = </Root/floor_1/floor_2/DefaultMaterial/opacityThreshold/TexCoordReader.outputs:result>
                    float outputs:r

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor_1/floor_2/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor_9.jpeg@
                    float2 inputs:st.connect = </Root/floor_1/floor_2/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor_1/floor_2/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }

        def Cube "floor_3" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["Maple_Plywood", "DefaultMaterial"]
            rel material:binding = </Root/floor_1/floor_3/DefaultMaterial>
            double size = 0.2
            float2 ui:nodegraph:node:pos = (60, 60)
            int ui:nodegraph:node:stackingOrder = 3
            quatf xformOp:orient = (1, 0, 1.9376205e-15, 0)
            float3 xformOp:scale = (1.0000002, 1.0000002, 1.0000002)
            float3 xformOp:translate = (7.450581e-9, 2.2737368e-13, 0.20000014)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token inputs:frame:stPrimvarName = "st" (
                    customData = {
                        dictionary realitykit = {
                            bool hide = 1
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/floor_1/floor_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 110.5)

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    color3f inputs:diffuseColor.connect = </Root/floor_1/floor_3/DefaultMaterial/diffuseColor.outputs:rgb>
                    float inputs:roughness = 0.75
                    token outputs:surface
                }

                def Shader "opacityThreshold"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor.png@
                    float2 inputs:st.connect = </Root/floor_1/floor_3/DefaultMaterial/opacityThreshold/TexCoordReader.outputs:result>
                    float outputs:r

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor_1/floor_3/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @floor_9.jpeg@
                    float2 inputs:st.connect = </Root/floor_1/floor_3/DefaultMaterial/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/floor_1/floor_3/DefaultMaterial.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }
            }
        }
    }

    def "Low_Poly_Light_Bulb" (
        active = true
        customData = {
            float3 rotationEulerHint = (3.1415927, 0, 0)
        }
        references = @Low_Poly_Light_Bulb.usdz@
    )
    {
        reorder nameChildren = ["bulbLight", "Materials", "Meshes"]
        quatf xformOp:orient = (-4.371139e-8, 1, 0, 0)
        float3 xformOp:scale = (0.010000001, 0.010000001, 0.010000001)
        float3 xformOp:translate = (0, 1.995, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "bulbLight" (
            customData = {
                float3 rotationEulerHint = (-1.5707964, 0, 0)
            }
        )
        {
            float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (0.7071068, 0.7071067, -1.3383115e-15, 1.2762156e-15)
            float3 xformOp:scale = (99.99998, 99.99998, 99.99998)
            float3 xformOp:translate = (-6.286012e-14, 1, -0.0000018373939)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "SpotLight"
            {
                float attenuationFalloffExponent = 1
                float attenuationRadius = 10
                float3 color = (1, 0.43734783, 0)
                token info:id = "RealityKit.SpotLight"
                float innerAngle = 45
                float intensity = 10000
                float outerAngle = 60

                def RealityKitStruct "Shadow"
                {
                }
            }
        }
    }
}

